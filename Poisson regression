# --------------------------------
# LOADING REQUIRED LIBRARIES
# --------------------------------

library(dplyr)       # Data manipulation
library(stringr)     # Text processing
library(tidyr)       # Data reshaping
library(gt)          # Beautiful tables
library(webshot2)    # Save tables as images or documents (ensure it's installed if you save)
library(sandwich)    # For vcovHC (Heteroskedasticity Consistent Covariance Matrix)
library(lmtest)      # For coeftest (to use robust standard errors in summary)

# --------------------------------
# LOADING DATA
# --------------------------------
# Make sure to update this path to where your file is located
data2 <- read.csv("/Users/rashisingh/Thesis/Survey_1_Rashi.csv")

# --------------------------------
# COMBINING DATA of t0 and t1
# --------------------------------
data2$concern_combined2 <- paste(data2$q41_t0, data2$q43_t1)
data2$ideal_children_society2 <- paste(data2$q50_t0_mod, data2$q52_mod_t1)
data2$ideal_children_personally2 <- paste(data2$q51_t0, data2$q53_mod_t1)

# --------------------------------
# CALCULATING AGE
# --------------------------------
data2$age <- 2025 - data2$numeric_birth_year

# --------------------------------
# FILTERING RESPONDENTS OF REPRODUCTIVE AGE (18–50)
# --------------------------------
reproductive_age_2 <- data2 %>%
  filter(!is.na(age), age >= 18, age <= 50)

# ----------------------------------------
# CLEANING & RECODING DEMOGRAPHIC VARIABLES
# --- Includes setting factor levels and reference categories ---
# ----------------------------------------

reproductive_age_cleaned <- reproductive_age_2 %>%
  # Keeping binary sex values
  filter(sex %in% c("Male", "Female")) %>%

  # Categorizing number of children
  mutate(present_children = case_when(
    numeric_number_children == 0 ~ "0",
    numeric_number_children == 1 ~ "1",
    numeric_number_children == 2 ~ "2",
    numeric_number_children >= 3 ~ "3 or more",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(present_children)) %>%

  # Simplifying education levels
  mutate(educational_qualification = case_when(
    education %in% c("Bachelor's or Master's degree", "Ph.D.") ~ "Bachelor/Master/PhD",
    education %in% c("Elementary school diploma", "High school diploma", "Middle school diploma") ~ "Elementary to High School",
    education == "No educational qualification" ~ "No education",
    TRUE ~ NA_character_
  )) %>%

  # Recoding employment status
  mutate(employment_current = case_when(
    employment_status == "Worker" ~ "Working",
    employment_status == "Student" ~ "Student",
    employment_status %in% c("Unemployed", "Retired", "Inactive (Not working nor looking for work)") ~ "Unemployed/Inactive/Retired",
    TRUE ~ NA_character_
  )) %>%

  # Simplifying marital status
  mutate(marital_status_current = case_when(
    marital_status == "Married" ~ "Married",
    marital_status %in% c("De facto seperated", "Legally seperated", "Divorced", "Widower", "Single/Unmarried") ~ "Not married",
    TRUE ~ NA_character_
  )) %>%

  # Grouping income brackets
  mutate(income_monthly = case_when(
    net_income_month %in% c("Less than 1,001 euros", "1,001 to 1,500 euros", "1,501 to 2,000 euros") ~ "Low income",
    net_income_month %in% c("2,001 to 3,000 euros", "3,001 to 5,000 euros") ~ "Middle income",
    net_income_month %in% c("5,001 to 10,000 euros", "More than 10.000 euros") ~ "High income",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(income_monthly)) %>%

  # Creating age groups
  mutate(age_bracket = cut(age,
                           breaks = c(17, 24, 29, 34, 39, 44, 50),
                           labels = c("18–24", "25–29", "30–34", "35–39", "40–44", "45–50"),
                           right = TRUE)) %>%

  # Convert concern text to lowercase and recode
  mutate(concern_combined2 = str_to_lower(concern_combined2)) %>%
  mutate(concern_category = case_when(
    str_detect(concern_combined2, "not at all concerned|unconcerned") ~ "UNCONCERNED",
    str_detect(concern_combined2, "fairly concerned") ~ "CONCERNED",
    str_detect(concern_combined2, "very concerned") ~ "VERY CONCERNED",
    str_detect(concern_combined2, "extremely concerned") ~ "EXTREMELY CONCERNED",
    TRUE ~ NA_character_
  )) %>%
  # Adding flood impact
  mutate(flood_impact = case_when(
    floodedcomune == 1 ~ "Flooded",
    floodedcomune == 0 ~ "Not flooded",
    TRUE ~ NA_character_
  )) %>%
  # --- Set Factor Levels and Reference Categories Here ---
  mutate(
    concern_category = factor(concern_category,
                              levels = c("UNCONCERNED", "CONCERNED", "VERY CONCERNED", "EXTREMELY CONCERNED")),

    sex = factor(sex, levels = c("Female", "Male")),

    present_children = factor(present_children,
                              levels = c("0", "1", "2", "3 or more")),

    educational_qualification = factor(educational_qualification,
                                       levels = c("No education", "Elementary to High School", "Bachelor/Master/PhD")), # Changed reference

    employment_current = factor(employment_current,
                                 levels = c("Unemployed/Inactive/Retired", "Working", "Student")), # Changed reference

    marital_status_current = factor(marital_status_current,
                                     levels = c("Not married", "Married")), # Changed reference

    income_monthly = factor(income_monthly,
                            levels = c("Low income", "Middle income", "High income")),

    flood_impact = factor(flood_impact, levels = c("Not flooded", "Flooded"))
  )

# Modifying ideal children here
clean_ideal_children <- function(df, var_name) {
  original_var <- var_name
  original_var_orig <- paste0("original_", var_name)
  new_cat_var <- sub("2$", "3", var_name)   # Cleaned variable name

  # Save original column
  df[[original_var_orig]] <- df[[original_var]]

  # Replace whitespace-only strings with NA
  df[[original_var]][grepl("^\\s*$", df[[original_var]])] <- NA

  # Convert to numeric safely
  num_vals <- suppressWarnings(as.numeric(as.character(df[[original_var]])))

  # Categorize responses as per your desired categories
  df[[new_cat_var]] <- case_when(
    is.na(num_vals) & !is.na(df[[original_var]]) ~ "There is no ideal number / unclear",
    is.na(num_vals) ~ NA_character_,
    num_vals == 0 ~ "0",
    num_vals == 1 ~ "1",
    num_vals == 2 ~ "2",
    num_vals == 3 ~ "3",
    num_vals %in% c(4, 5) ~ "4 or 5", # Assuming 4 or 5 maps to this
    TRUE ~ "There is no ideal number / unclear"
  )

  return(df)
}

# Apply to both personal and societal ideal children variables
reproductive_age_cleaned <- clean_ideal_children(reproductive_age_cleaned, "ideal_children_personally2")
reproductive_age_cleaned <- clean_ideal_children(reproductive_age_cleaned, "ideal_children_society2")

# Check tables for confirmation
table(reproductive_age_cleaned$ideal_children_personally3, useNA = "ifany")
table(reproductive_age_cleaned$ideal_children_society3, useNA = "ifany")

# CLEANING REGRESSION DATA
regression_data <- reproductive_age_cleaned %>%
  filter(
    !ideal_children_personally3 %in% c("Unclear", NA),
    !ideal_children_society3 %in% c("Unclear", NA),
    !is.na(concern_category),
    concern_category != "Unclear"
  ) %>%
  filter(!is.na(flood_impact)) # Filter out NAs for flood_impact


# Fix the ideal_children_personally_num and ideal_children_society_num creation
regression_data <- regression_data %>%
  mutate(
    # Convert original categories to actual numerical counts
    ideal_children_personally_num = case_when(
      ideal_children_personally3 == "0" ~ 0,
      ideal_children_personally3 == "1" ~ 1,
      ideal_children_personally3 == "2" ~ 2,
      ideal_children_personally3 == "3" ~ 3,
      ideal_children_personally3 == "4 or 5" ~ 4, # Map "4 or 5" to 4 for numerical conversion
      TRUE ~ NA_integer_
    ),
    ideal_children_society_num = case_when(
      ideal_children_society3 == "0" ~ 0,
      ideal_children_society3 == "1" ~ 1,
      ideal_children_society3 == "2" ~ 2,
      ideal_children_society3 == "3" ~ 3,
      ideal_children_society3 == "4 or 5" ~ 4, # Map "4 or 5" to 4 for numerical conversion
      TRUE ~ NA_integer_
    )
  ) %>%
  # Filter out any NAs that might have been introduced by the case_when for safety
  filter(!is.na(ideal_children_personally_num),
         !is.na(ideal_children_society_num))


# Check the new numerical variables
table(regression_data$ideal_children_personally_num, useNA = "ifany")
table(regression_data$ideal_children_society_num, useNA = "ifany")

# Now re-calculate mean and variance to re-confirm underdispersion
mean(regression_data$ideal_children_personally_num, na.rm = TRUE)
var(regression_data$ideal_children_personally_num, na.rm = TRUE)

mean(regression_data$ideal_children_society_num, na.rm = TRUE)
var(regression_data$ideal_children_society_num, na.rm = TRUE)


# -------------------------------------------------------------
# RUN POISSON REGRESSION MODELS WITH ROBUST STANDARD ERRORS
# -------------------------------------------------------------

# --- Model for Ideal Children Personally ---
poisson_model_personally <- glm(
  ideal_children_personally_num ~ concern_category + flood_impact + sex + present_children +
    educational_qualification + employment_current + marital_status_current +
    income_monthly + age_bracket,
  family = poisson(link = "log"),
  data = regression_data
)

# Calculate and Display Robust Standard Errors
robust_vcov_personally <- vcovHC(poisson_model_personally, type = "HC1")
results_personal <- coeftest(poisson_model_personally, vcov = robust_vcov_personally)
# results_personal # display it

# --- Model for Ideal Children for Society ---
poisson_model_society <- glm(
  ideal_children_society_num ~ concern_category + flood_impact + sex + present_children +
    educational_qualification + employment_current + marital_status_current +
    income_monthly + age_bracket,
  family = poisson(link = "log"),
  data = regression_data
)

# Calculate and Display Robust Standard Errors
robust_vcov_society <- vcovHC(poisson_model_society, type = "HC1")
results_society <- coeftest(poisson_model_society, vcov = robust_vcov_society)
# results_society # display it


# -------------------------------------------------------------
# Prepare data for the gt table
# -------------------------------------------------------------

# Extract results for 'personally'
df_personal <- tibble(
  Term = rownames(results_personal),
  Estimate_val = results_personal[, "Estimate"],
  StdErr_val = results_personal[, "Std. Error"],
  Pval_val = results_personal[, "Pr(>|z|)"]
) %>%
  mutate(
    IRR = exp(Estimate_val),
    `Robust SE` = StdErr_val,
    `Robust p` = Pval_val
  ) %>%
  select(Term, IRR, `Robust SE`, `Robust p`) %>%
  rename_with(~ paste0(.x, "_Personal"), .cols = c("IRR", "Robust SE", "Robust p"))


# Extract results for 'society'
df_society <- tibble(
  Term = rownames(results_society),
  Estimate_val = results_society[, "Estimate"],
  StdErr_val = results_society[, "Std. Error"],
  Pval_val = results_society[, "Pr(>|z|)"]
) %>%
  mutate(
    IRR = exp(Estimate_val),
    `Robust SE` = StdErr_val,
    `Robust p` = Pval_val
  ) %>%
  select(Term, IRR, `Robust SE`, `Robust p`) %>%
  rename_with(~ paste0(.x, "_Society"), .cols = c("IRR", "Robust SE", "Robust p"))


# Merge the two data frames by 'Term'
full_results <- full_join(df_personal, df_society, by = "Term")

# Reorder columns for a side-by-side comparison
full_results <- full_results %>%
  select(
    Term,
    IRR_Personal, `Robust SE_Personal`, `Robust p_Personal`,
    IRR_Society, `Robust SE_Society`, `Robust p_Society`
  )

# --- Define the variable labels for better readability ---
# This dictionary maps the original model term names to user-friendly labels.
var_labels <- c(
    "(Intercept)" = "Intercept",
    "concern_categoryCONCERNED" = "Concerned",
    "concern_categoryVERY CONCERNED" = "Very Concerned",
    "concern_categoryEXTREMELY CONCERNED" = "Extremely Concerned",
    "flood_impactFlooded" = "Flood Impact",
    "sexMale" = "Male",
    "present_children1" = "1 Child",
    "present_children2" = "2 Children",
    "present_children3 or more" = "3 or more Children",
    # Updated terms for educational_qualification
    "educational_qualificationElementary to High School" = "Elementary to High School",
    "educational_qualificationBachelor/Master/PhD" = "Bachelor/Master/PhD",
    # Updated terms for employment_current
    "employment_currentWorking" = "Working",
    "employment_currentStudent" = "Student",
    # Updated term for marital_status_current
    "marital_status_currentMarried" = "Married",
    "income_monthlyMiddle income" = "Middle Income",
    "income_monthlyHigh income" = "High Income",
    "age_bracket25–29" = "Age 25–29",
    "age_bracket30–34" = "Age 30–34",
    "age_bracket35–39" = "Age 35–39",
    "age_bracket40–44" = "Age 40–44",
    "age_bracket45–50" = "Age 45–50"
)

# --- Apply the new labels to the 'Term' column ---
full_results_labeled <- full_results %>%
  mutate(Term = recode(Term, !!!var_labels))


# --- Define your subheadings and map terms to sections ---
section_names_order <- c(
    "Model Intercept",
    "Climate Concern",
    "Impact of Floods",
    "Gender",
    "Present Children",
    "Education",
    "Employment",
    "Marital Status",
    "Income",
    "Age"
)

# Create a mapping from the readable Term labels (from `var_labels`) to their section names.
term_to_section_map <- c(
    "Intercept" = "Model Intercept",
    "Concerned" = "Climate Concern",
    "Very Concerned" = "Climate Concern",
    "Extremely Concerned" = "Climate Concern",
    "Flood Impact" = "Impact of Floods",
    "Male" = "Gender",
    "1 Child" = "Present Children",
    "2 Children" = "Present Children",
    "3 or more Children" = "Present Children",
    "Elementary to High School" = "Education",
    "Bachelor/Master/PhD" = "Education",
    "Working" = "Employment",
    "Student" = "Employment",
    "Married" = "Marital Status",
    "Middle Income" = "Income",
    "High Income" = "Income",
    "Age 25–29" = "Age",
    "Age 30–34" = "Age",
    "Age 35–39" = "Age",
    "Age 40–44" = "Age",
    "Age 45–50" = "Age"
)

# --- Define a global desired order for all terms that will appear in the table ---
# This ensures specific ordering within sections as well
all_terms_overall_order <- c(
  "Intercept",
  # Climate Concern
  "Concerned",
  "Very Concerned",
  "Extremely Concerned",
  # Impact of Floods
  "Flood Impact",
  # Gender
  "Male",
  # Present Children (Order 1, 2, 3+)
  "1 Child",
  "2 Children",
  "3 or more Children",
  # Education (Order Elementary to High School, then Bachelor/Master/PhD)
  "Elementary to High School",
  "Bachelor/Master/PhD",
  # Employment (Order Working, then Student)
  "Working",
  "Student",
  # Marital Status
  "Married",
  # Income (Order Middle, then High)
  "Middle Income",
  "High Income",
  # Age (Ordered by increasing age groups)
  "Age 25–29",
  "Age 30–34",
  "Age 35–39",
  "Age 40–44",
  "Age 45–50"
)


# --- Add the 'Section' column and order the data frame for gt ---
full_results_for_gt <- full_results_labeled %>%
  mutate(Section = term_to_section_map[Term]) %>%
  mutate(Section = factor(Section, levels = section_names_order)) %>%
  # Convert 'Term' to a factor with the desired global order
  mutate(Term = factor(Term, levels = all_terms_overall_order[all_terms_overall_order %in% Term])) %>%
  arrange(Section, Term) # This now respects the factor levels of Term for ordering


# --- Define the helper function for p-value stars ---
format_p_value_with_stars <- function(p_value) {
  stars <- ""
  if (p_value < 0.001) {
    stars <- "***"
  } else if (p_value < 0.01) {
    stars <- "**"
  } else if (p_value < 0.05) {
    stars <- "*"
  }
  p_formatted <- sprintf("%.3f", p_value)
  if (p_value < 0.001 && p_value != 0) {
    p_formatted <- "<0.001"
  } else if (p_value == 0) {
    p_formatted <- "0.000"
  }
  paste0(p_formatted, stars)
}

# --- Format p-value columns to character strings BEFORE gt() ---
full_results_formatted <- full_results_for_gt %>%
  mutate(
    across(starts_with("Robust p"), ~sapply(.x, format_p_value_with_stars))
  )

# -------------------------------------------------------------
# Create the gt table with desired formatting
# -------------------------------------------------------------
regression_table <- full_results_formatted %>%
  gt(groupname_col = "Section",
     rowname_col = "Term") %>%
  tab_header(
    title = md("**Poisson Regression Results with Robust Standard Errors**"),
    subtitle = "Comparing Ideal Number of Children Personally vs. For Society"
  ) %>%
  tab_spanner(
    label = md("**Ideal Children Personally**"),
    columns = starts_with(c("IRR_Personal", "Robust SE_Personal", "Robust p_Personal"))
  ) %>%
  tab_spanner(
    label = md("**Ideal Children for Society**"),
    columns = starts_with(c("IRR_Society", "Robust SE_Society", "Robust p_Society"))
  ) %>%
  cols_label(
    IRR_Personal = md("IRR"),
    `Robust SE_Personal` = md("Robust SE"),
    `Robust p_Personal` = md("p-value"),
    IRR_Society = md("IRR"),
    `Robust SE_Society` = md("Robust SE"),
    `Robust p_Society` = md("p-value")
  ) %>%
  fmt_number(
    columns = starts_with("IRR"),
    decimals = 3
  ) %>%
  fmt_number(
    columns = starts_with("Robust SE"),
    decimals = 4
  ) %>%
  tab_footnote(
    footnote = "IRR (Incidence Rate Ratio): Multiplicative change in the expected count for a one-unit increase in the predictor (or for a given category relative to the baseline).",
    locations = cells_column_labels(starts_with("IRR"))
  ) %>%
  tab_footnote(
    footnote = "Robust SE: Standard errors adjusted for potential heteroskedasticity (and underdispersion in this case), providing more reliable inference.",
    locations = cells_column_labels(starts_with("Robust SE"))
  ) %>%
  tab_footnote(
    footnote = "p-value: Probability value based on robust standard errors, indicating statistical significance. (* p < 0.05, ** p < 0.01, *** p < 0.001)",
    locations = cells_column_labels(starts_with("Robust p"))
  ) %>%
  tab_source_note(
    source_note = "Models fitted using Poisson regression with log link. Underdispersion handled via robust standard errors."
  ) %>%
  tab_style(
    style = cell_fill(color = "lightcyan"),
    locations = cells_body(
      columns = starts_with("Robust p"),
      rows = full_results$`Robust p_Personal` < 0.05 | full_results$`Robust p_Society` < 0.05
    )
  ) %>%
  tab_options(
    row_group.font.weight = "bold"
  )

# Display the table
regression_table
